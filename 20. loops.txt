Loops
Loops are useful for executing a block of code for a specified number of times based on some specified conditions. There are different types of loops in JavaScript:

for loops
for ... in loops
for ... of loops
while loops
do ... while loops  

----
How to use for loops
for loops are used to execute a block of code a number of times:

for (let i = 0; i < 5; i++) {
    return i;
}

----

How to use for ... in loops
for ... in loops are used to loop through the properties of an object:

for (let prop in obj) {
    return obj.prop;
}

---

How to use for ... of loops
for ... of loops are used to loop through the values of iterable objects like arrays, strings, maps, and so on:

let numArr = [2, 4, 6, 8]
for (let val of numArr) {
    return val ** 2
}

---

How to use while loops
while loops are used to execute a block of code while a certain condition still holds true:

while (i < 20) {
    return i;
    i++;
}

---

How to use do ... while loops
do ... while loops execute a block of code first without any conditions. For as long as a certain condition still holds true it continues to execute the block of code:

let i = 3;
do {
    return i;
    i++;
} 
while (i < 4)



============
do...while loop is similar to the while loop. 

The only difference is that 
	in do…while loop, the body of loop is executed at least once.

do {
    // body of loop
} while(condition)


---


while (condition) {
    // body of loop
}

eg.

// program to display numbers from 1 to 5
// initialize the variable

let i = 1, n = 5;

// while loop from i = 1 to 5
while (i <= n) {
    console.log(i);
    i += 1;
}

========================================


What is the difference between ‘of’ and ‘in’?

For Of: It loops over the Values
For In: Loops over the Keys

===

const array = [1,2,3,4,5]
array.six = 6
array.seven = 7

//This array will now look like [1,2,3,4,5,six:6,seven:7]


// OF: iterates over values


for (const value of array ) {   
  console.log(value)
}


// o/p : 
// 1
// 2
// 3
// 4
// 5


----

// IN: iterates over keys

for (const key in array ) {
  console.log(key, array[key])
}

// Logs:
// '0' 1
// '1' 2
// '2' 3
// '3' 4
// '4' 5
// 'six' 6
// 'seven' 7

---

---

const string = 'str'
for (const letter of string) {
  console.log(letter)
}

// 's'
// 't'
// 'r'


=========================================


For loop vs forEach loop 

For Loop:

The "for" loop used for iterating over arrays, objects, or sequences of values.

It provides more control over the iteration process, allowing you to specify the start and end conditions, as well as the increment or decrement step.

It is typically used when you need to perform a specific action a fixed number of times or when you need fine-grained control over the loop.

It support "break" or "continue" statements for early termination or skipping iterations

for (let i = 0; i < array.length; i++) {

  console.log(array[i]);

}

====

forEach Loop:

The "forEach" loop is a higher-order function available on arrays in JavaScript.

It is specifically designed for iterating over the elements of an array and executing a provided function once for each element.

It is often preferred when you want to perform the same action on each element of an array.

It does not support "break" or "continue" statements for early termination or skipping iterations;

eg.

array.forEach(function (element) {

  console.log(element);

});
=================


Loops
Loops are useful for executing a block of code for a specified number of times based on some specified conditions. There are different types of loops in JavaScript:

for loops
for ... in loops
for ... of loops
while loops
do ... while loops  

====

suppose array has 10000 records, and we want to find specific reocrd. at that time once match, we dont want to proceed more. so in this situation
for loop should be used bcz we can used break statement to check further. 
but same thing not possible in forEach so it iterate over 10000 records
