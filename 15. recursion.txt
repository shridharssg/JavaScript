What is Recursion?
Recursion is defined as the process of a function calling itself. 
A recursive function is the function that corresponds to this. 
The base case (or halting condition) and the recursive call to itself are commonly two elements of a recursive function. 


The base case/terminate condition is when the function should no longer recurse.' 

If we dont mentioned terminate condition, then it goes infinite loop and it will throws "maximize call stack size exceeded"



function test(){

	test()
}


test()

==========

when to use recursion
when we need to work on nested structure and we have no idea about how nested it. 

like manager has team, inside that lead, each lead has team, agian continue.



let emp = {
	name : 'shridhar'
	teams : [
			{ name : 'harsha', teams:[]},
			{ name : 'kavi', teams:
						[
							{name : 'sachin', teams : [ {
											name : 'viru', teams : []
										 }]
							}
						]
			}
		]
		
	}


so here, shridhar has team
	harsha has no team
	kavi has teams which is sachin, and sachin also teams name is viru..

	so we dont have idea how nested it.

to print name all employess, we used recursion here.



---------


function getTeam(data){
	
	// terminate condition or base condition : if teams is empty means we reached at last
	if(data.teams.length==0){
		return;
	}
	
	data.teams.forEach(t => {
		console.log(t.name)
		getTeam(t);
	})
	
}

getTeam(emp)

